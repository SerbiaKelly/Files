---
--- Generated by liurenhai
--- Created by liurenhai.
--- DateTime: 2019/5/14 15:00
---

local xhzd_pb = require 'xhzd_pb'
local proxy_pb = require 'proxy_pb'

panelReplay_xhzd = {}
local this = panelReplay_xhzd
local gameObject
local message

local roomID
local roomTime
local roomRound
local CountDown
local isSelectBaoZhuang
local baoZhuangSeat
local player={}
local playerName={}
local playerIcon={}
local playerScore={}
local playerMaster={}
local playerSound={}

local playerGridIn={}
local playerGridOut={}
local OutCardZhaDan={}
local playerGridOutDaiZi={}
local OutCardZhaDanWenZi={}
local OutCardZhaDanWenZiBG={}
local playerReady={}
local OutCardFinish={}
local playerzi={}
local playerNiao={}
local playerKuang={}
local playerSound={}
local roomSetting
local onClickWidget
local watchPlates={};
local watchPanel;
local watchMask;
local watchGrid;
local watchPlatePrefab;

local playerData={}
local mySeat = -1;
local lastFindCards={}
local lastFindCategory = 0
local helpNumWhenHaveOneCard = 0
local cutTime = 0.25;
local rawSpeed;

local setting_text


local playerCoroutine = {}

playerCoroutine[0] = {}
playerCoroutine[1] = {}
playerCoroutine[2] = {}

local selectCards={}
local connect
function this.GetNetState()
    return connect.IsConnect
end
local connectCor
local RuleInfoPanel--玩法展示界面
local bg
local bg1
local bg2
local bg3
local bg4

this.chatTexts = {}
this.fanHuiRoomNumber = nil
this.OnRoundStarted = nil
this.needCheckNet=true
local RestTime
local restTime


local batteryLevel
local network
local pingLabel


local panelShare
local baoZhuangView--包庄的界面
local scoreView={} --积分界面
local winSeat
local bankerSeat;
local playerSize;
local myCardList
local dipaiNum = 108;

local tempIntList1 = {}
local tempIntList2 = {}
local tempIntList3 = {}
local tempIntList4 = {}
local tempIntList5 = {}
local tempIntList6 = {}
local tempIntList7 = {}
local tempIntList8 = {}

local isPause = false
local playInterval = 1.5
local playIndex = 1
local ButtonSlow
local ButtonPause
local ButtonFast
local FastLabel
local ButtonBack
local SlowLabel
local RoundDetail
local conFun;
local conTime;
local beLeftCardGrid={}
local beLeftCardBoom={}
local playerTrusteeship={}
local playerOfflineTime={}

local dismissTypeTip

function this.Awake(obj)
    gameObject = obj;
    this.gameObject = obj
    message = gameObject:GetComponent('LuaBehaviour');
    RestTime = gameObject.transform:Find("RestTime")
    roomID = gameObject.transform:Find('topbg/room/ID');
    roomTime = gameObject.transform:Find('time');
    roomRound = gameObject.transform:Find('topbg/round/num');
    roomSetting = gameObject.transform:Find('setting')
    bg = gameObject.transform:Find("bg")
    bg1 = gameObject.transform:Find("bg1")
    bg2 = gameObject.transform:Find("bg2")
    bg3 = gameObject.transform:Find("bg3")
    bg4 = gameObject.transform:Find("bg4")
    batteryLevel = gameObject.transform:Find('battery/level'):GetComponent('UISprite')
    network = gameObject.transform:Find('network'):GetComponent('UISprite')
    pingLabel = gameObject.transform:Find('ping'):GetComponent('UILabel')

    ButtonSlow = gameObject.transform:Find('control/ButtonSlow')
    SlowLabel = gameObject.transform:Find('control/ButtonSlow/Label')
    ButtonPause = gameObject.transform:Find('control/ButtonPause');
    ButtonFast = gameObject.transform:Find('control/ButtonFast');
    FastLabel = gameObject.transform:Find('control/ButtonFast/Label')
    ButtonBack = gameObject.transform:Find('control/ButtonBack')
    watchPanel = gameObject.transform:Find("watchPanel");
    watchMask = gameObject.transform:Find("watchPanel/watchMask");
    watchGrid = gameObject.transform:Find("watchPanel/plateGrid");
    watchPlatePrefab = gameObject.transform:Find("watchPanel/card");


    message:AddClick(ButtonSlow.gameObject, this.OnClickButtonSlow);
    message:AddClick(ButtonPause.gameObject, this.OnClickButtonPause);
    message:AddClick(ButtonFast.gameObject, this.OnClickButtonFast);
    message:AddClick(ButtonBack.gameObject, this.OnClickButtonBack);
    for i = 0, 3 do
        local playerIcon = gameObject.transform:Find('player'.. i ..'/info/Texture')
        message:AddClick(playerIcon.gameObject, this.OnClickPlayerIcon)
    end
    this.GetPlayerUI();
    this.GetScoreUI();

    message:AddClick(watchMask.gameObject, this.OnWatchMaskClick);

	dismissTypeTip = gameObject.transform:Find('dismissTypeTip/Tip/text')
	message:AddClick(gameObject.transform:Find('dismissTypeTip/Tip/dismissTypeTipBtn').gameObject, function (go)
		gameObject.transform:Find('dismissTypeTip/Tip').gameObject:SetActive(false)
		gameObject.transform:Find('dismissTypeTip/dismissTypeTipBtn').gameObject:SetActive(true)
	end)
	message:AddClick(gameObject.transform:Find('dismissTypeTip/dismissTypeTipBtn').gameObject, function (go)
		gameObject.transform:Find('dismissTypeTip/Tip').gameObject:SetActive(true)
		gameObject.transform:Find('dismissTypeTip/dismissTypeTipBtn').gameObject:SetActive(false)
	end)
    rawSpeed = playInterval
end

function this.Start()

end

function this.OnEnable()
    AudioManager.Instance:PlayMusic('ZD_Bgm', true);
	gameObject.transform:Find('dismissTypeTip/Tip').gameObject:SetActive(false)
	gameObject.transform:Find('dismissTypeTip/dismissTypeTipBtn').gameObject:SetActive(true)
end

function this.Update()

end

function this.GetPlayerUI()
    for i=0,3 do
        player[i] = gameObject.transform:Find('player'..i);
        playerName[i] = gameObject.transform:Find('player'..i..'/info/name');
        playerIcon[i] = gameObject.transform:Find('player'..i..'/info/Texture');
        playerScore[i] = gameObject.transform:Find('player'..i..'/info/score');
        playerMaster[i] = gameObject.transform:Find('player'..i..'/info/master');
        playerSound[i] = gameObject.transform:Find('player'..i..'/info/sound');
        playerGridIn[i] = gameObject.transform:Find('player'..i..'/GridIn');
        playerGridOut[i] = gameObject.transform:Find('player'..i..'/Grid/GridOut');
        OutCardZhaDan[i] = gameObject.transform:Find('player'..i..'/Grid/zhadan');
        playerGridOutDaiZi[i] = gameObject.transform:Find('player'..i..'/Grid/dai');
        OutCardZhaDanWenZiBG[i] = gameObject.transform:Find('player'..i..'/Grid/zhadan/sp');
        OutCardZhaDanWenZi[i] = gameObject.transform:Find('player'..i..'/Grid/zhadan/lb');
        playerReady[i] = gameObject.transform:Find('player'..i..'/info/ready');
        OutCardFinish[i] = gameObject.transform:Find('player'..i..'/info/texiao/OutCardFinish');
        playerzi[i] = gameObject.transform:Find('player'..i..'/texiaozi/pass')
        playerNiao[i] = gameObject.transform:Find('player'..i..'/info/niao')
        playerKuang[i] = gameObject.transform:Find('player'..i..'/info/kuang01')
        playerTrusteeship[i] = gameObject.transform:Find('player'..i..'/info/trusteeship')
		playerOfflineTime[i] = gameObject.transform:Find('player'..i..'/info/offline')
        if i>0 then
            watchPlates[i] = gameObject.transform:Find('player'..i..'/watchPlate');
            message:AddClick(watchPlates[i].gameObject, this.OnWatchPlateClick);
        end
        beLeftCardGrid[i] = gameObject.transform:Find('beLeftCard/'..i..'/GridOut');
		beLeftCardBoom[i] = gameObject.transform:Find('beLeftCard/'..i..'/zhadanshow');
    end
end

function this.GetScoreUI()
    --积分界面
    scoreView.transform = gameObject.transform:Find('scoreView');
    scoreView.allScore = {}--大面板积分
    scoreView.allScore.transform = scoreView.transform:Find('allScore');
    scoreView.allScore.players = {}
    for i=0,3 do
        scoreView.allScore.players[i]={}
        scoreView.allScore.players[i].gameObject = scoreView.allScore.transform:Find('play'..i).gameObject
        scoreView.allScore.players[i].transform = scoreView.allScore.transform:Find('play'..i)
        scoreView.allScore.players[i].name = scoreView.allScore.players[i].transform:Find('name')
        scoreView.allScore.players[i].history = scoreView.allScore.players[i].transform:Find('history')
        scoreView.allScore.players[i].now = scoreView.allScore.players[i].transform:Find('now')
        scoreView.allScore.players[i].happyScore = scoreView.allScore.players[i].transform:Find('happyScore')
    end
    scoreView.score = {}--当前牌面分
    scoreView.score.transform = scoreView.transform:Find('score');
    scoreView.score.scoreLabel = scoreView.score.transform:Find('scoreLabel');
end

local whoShow
function this.WhoShow(data)
    panelLogin.HideNetWaitting()
    this.Reset()

    whoShow = data
    if not data.isNeedRequest then
        return
    end
    for i=0,3 do
        player[i].gameObject:SetActive(false)
		playerScore[i]:GetComponent('UILabel').text ='0'
		playerMaster[i].gameObject:SetActive(false)
		playerSound[i].gameObject:SetActive(false)
		playerGridIn[i].gameObject:SetActive(false)
		playerGridOut[i].gameObject:SetActive(false)
		playerGridOutDaiZi[i].gameObject:SetActive(false)
		OutCardZhaDan[i].gameObject:SetActive(false)
		playerReady[i].gameObject:SetActive(false)
		playerzi[i].gameObject:SetActive(false)
		OutCardFinish[i].gameObject:SetActive(false);
        playerKuang[i].gameObject:SetActive(false)
        playerNiao[i].gameObject:SetActive(false)
        for j = 0, beLeftCardGrid[i].childCount-1  do
            beLeftCardGrid[i]:GetChild(j).gameObject:SetActive(false);
        end
        for j = 0, beLeftCardBoom[i].childCount-1  do
            beLeftCardBoom[i]:GetChild(j).gameObject:SetActive(false);
        end
        scoreView.allScore.players[i].now:GetComponent('TweenPosition').enabled = false
        playerTrusteeship[i].gameObject:SetActive(false); 
        playerOfflineTime[i].gameObject:SetActive(false); 
	end
    PanelManager.Instance:HideWindow('panelLobby')
    PanelManager.Instance:HideWindow('panelClub')
    local msg = Message.New()
    local b = proxy_pb.PRoundRecords()
    b.roomId = replayData.roomId
    b.round = replayData.round
    b.gameType = proxy_pb.XHZD
    msg.type = proxy_pb.ROUND_RECORDS
    msg.body = b:SerializeToString()
    SendProxyMessage(msg, this.OnGetRoundDetail);
    PanelManager.Instance:HideWindow('panelRecordDetail')
end


function this.Reset()
    playInterval = 1.5
    isPause = false
    playIndex = 1
    mySeat = -1

    ButtonPause:GetComponent('UIButton').normalSprite = 'zanting'
    FastLabel:GetComponent('UILabel').text = ''
    SlowLabel:GetComponent('UILabel').text = ''

end

-- 获得局详情
function this.OnGetRoundDetail(msg)
    local b = xhzd_pb.RRoundRecords()
    b:ParseFromString(msg.body)
    RoundDetail = b;
	dismissTypeTip:GetComponent("UILabel").text = b.diss
    bankerSeat = RoundDetail.bankerSeat --#RoundDetail.records > 0 and RoundDetail.records[1].seat or 0
    roomData={}
    roomData.setting = RoundDetail.setting;
    roomData.round = replayData.round;
    roomData.roomNumber = replayData.roomNumber;
    playerSize 	= roomData.setting.size;
    conTime = coroutine.start(RefreshTime, roomTime:GetComponent("UILabel"), 1)
    this.InitPlayerData(RoundDetail);
    this.SetRoomInfo();

    local setting_gound = getXHZDRuleString(roomData.setting);
    roomSetting:GetComponent('UILabel').text = setting_gound;
    roomSetting:GetChild(0):GetComponent('UILabel').text = setting_gound;
    for i = 1, #RoundDetail.players do
        if RoundDetail.wrapBankerSeat == RoundDetail.players[i].seat then
            playerMaster[this.GetUIIndexBySeat(RoundDetail.players[i].seat)].gameObject:SetActive(true)
            scoreView.allScore.players[i-1].name:GetComponent('UILabel').text = '[ff6600](庄)[-]'..RoundDetail.players[i].name
        else
            scoreView.allScore.players[i-1].name:GetComponent('UILabel').text = RoundDetail.players[i].name
        end
        scoreView.allScore.players[i-1].history:GetComponent('UILabel').text = RoundDetail.players[i].history
        scoreView.allScore.players[i-1].now:GetComponent('UILabel').text = '0'
        scoreView.allScore.players[i-1].happyScore:GetComponent('UILabel').text = '0'
        scoreView.allScore.players[i-1].gameObject:SetActive(true);
        local index = this.GetUIIndexBySeat(RoundDetail.players[i].seat)
        playerScore[index].transform:GetComponent('UILabel').text = '0'
        if RoundDetail.players[i].niao then
            playerNiao[index].gameObject:SetActive(true)
        else
            playerNiao[index].gameObject:SetActive(false)
        end
    end
    conFun = coroutine.start(this.AutoPlay)
    player[2].gameObject:SetActive(RoundDetail.setting.size==4)
    player[3].gameObject:SetActive(RoundDetail.setting.size==4)
    scoreView.allScore.players[2].gameObject:SetActive(RoundDetail.setting.size==4)
    scoreView.allScore.players[3].gameObject:SetActive(RoundDetail.setting.size==4)
end

--自动播放
function this.AutoPlay()

    if #RoundDetail.records == 0 then
        return
    end

    coroutine.wait(1)

    local lastSeat = RoundDetail.records[1].seat -1
    while gameObject.activeSelf do
        if not isPause then
            local d = RoundDetail.records[playIndex];
            this.OnDoPlayer(d)
            playIndex = playIndex+1
            print('type : '..d.type.."  当前进度 ",playIndex,"/",#RoundDetail.records)
			if RoundDetail.roundEnd and RoundDetail.roundEnd~=nil then 
				if playIndex > #RoundDetail.records and #RoundDetail.roundEnd.players > 0 then
					coroutine.wait(1.5)
					local stageRoomInfo 		= {}
					stageRoomInfo.roomNumber 	= replayData.roomNumber
					stageRoomInfo.roomData 		= roomData
					stageRoomInfo.roomData.round 		= roomData.round+1
					stageRoomInfo.playerDatas 	= RoundDetail.roundEnd.players
					stageRoomInfo.playerData 	= playerData
					stageRoomInfo.cardsDark = RoundDetail.roundEnd.cardsDark
					stageRoomInfo.isInGame = false
					PanelManager.Instance:ShowWindow('panelStageClear_xhzd',stageRoomInfo)
					return
				end
			end
            if d.type ~= 2 then
                coroutine.wait(playInterval)
            end
            
        else
            coroutine.wait(0.5)
        end
    end
end

function this.OnDoPlayer(record)
    if record.type ~= 2 then
        print(' record.trusteeship : '..tostring(record.trusteeship)..'  record.connected : '..tostring(record.connected))
        playerTrusteeship[this.GetUIIndexBySeat(record.seat)].gameObject:SetActive(record.trusteeship); 
        playerOfflineTime[this.GetUIIndexBySeat(record.seat)].gameObject:SetActive(not record.connected); 
    end
    if record.type == 0 or record.type == 1 then
        for i = 1, #record.happlys do
            local inx = this.GetUIIndexBySeat(record.happlys[i].seat);
            if record.happlys[i].happly ~= 0 and record.happlys[i].happly ~= tonumber(scoreView.allScore.players[i-1].happyScore:GetComponent('UILabel').text) then
                AudioManager.Instance:PlayAudio('addScore')
			end
            scoreView.allScore.players[i-1].happyScore:GetComponent('UILabel').text = record.happlys[i].happly
            if record.happlys[i].roundGrab ~= 0 and record.happlys[i].roundGrab ~= tonumber(scoreView.allScore.players[i-1].now:GetComponent('UILabel').text) then
                AudioManager.Instance:PlayAudio('addScore')
				scoreView.allScore.players[i-1].now:GetComponent('UILabel').color = Color.red
				scoreView.allScore.players[i-1].now:GetComponent('TweenPosition').enabled = true
				local pos = scoreView.allScore.players[i-1].now.transform.localPosition
				coroutine.start(
					function()
						coroutine.wait(2)
						scoreView.allScore.players[i-1].now:GetComponent('TweenPosition').enabled = false
						scoreView.allScore.players[i-1].now:GetComponent('UILabel').color = Color.white
						scoreView.allScore.players[i-1].now.transform.localPosition = pos
					end
				)
			end
            scoreView.allScore.players[i-1].now:GetComponent('UILabel').text = record.happlys[i].roundGrab
            playerScore[inx].transform:GetComponent('UILabel').text = record.happlys[i].roundGrab
        end
    end
    if record.type == 0 then--pass
        this.OnPlayerPass(record);
    elseif record.type == 1 then--出牌
        this.OnPlayerPlay(record);
    elseif record.type == 2 then--结算
        coroutine.start(
        function()
            coroutine.wait(1)
            for i=0,3 do
                playerGridOut[i].gameObject:SetActive(false)
                playerGridOutDaiZi[i].gameObject:SetActive(false)
                OutCardZhaDan[i].gameObject:SetActive(false)
                playerzi[i].gameObject:SetActive(false)
                playerGridIn[i].gameObject:SetActive(false)
            end
            for i = 0, 3 do
                local index = this.GetUIIndexBySeat(i)
                local isOutCardOneOrTow = false
                if index == 1 or index == 2 then
                    isOutCardOneOrTow=true
                end
                if playerData[i] then
                    local outcard = {}
                    table.sort(playerData[i].cards)
                    outcard.cards = playerData[i].cards
                    outcard.feiji = {}
                    outcard.daipai = {}
                    this.RefreshOutGrid(beLeftCardGrid[index],outcard,isOutCardOneOrTow,index)
                    this.SetBeLeftCardBoom(beLeftCardGrid[index],playerData[i].cards,index,isOutCardOneOrTow) 
                end
            end
            for i=1,#record.happlys do
                local data = record.happlys[i]
                scoreView.allScore.players[i-1].happyScore:GetComponent('UILabel').text = data.happly
                scoreView.allScore.players[i-1].gameObject:SetActive(true)
            end
        end
        )
    end
end

function this.GetBoomInx(boomNum,inx)
	local num ={}
	for i = 1, #boomNum do
		if boomNum[i] == inx then
			local num1 = 0
			for j = 1, i-1 do
				num1  = num1 + boomNum[j]
			end
			table.insert(num,num1)
		end
	end
	return num
end

function this.SetBeLeftCardBoom(grid,cards,index,isOutCardOneOrTow)
	if cards ~= nil and #cards>0 then
		local fenxicard = this.fenXiCard(cards)
		local boomNum = {}
		local num = {}
		for i = 5, 15 do
			if  fenxicard[i] then
				table.insert(boomNum,fenxicard[i].num)
			end
		end
		local num4 = this.GetBoomInx(boomNum,4)
		local num5 = this.GetBoomInx(boomNum,5)
		local num6 = this.GetBoomInx(boomNum,6)
		local num7 = this.GetBoomInx(boomNum,7)
		local num8 = this.GetBoomInx(boomNum,8)
		for i = 1, #num4 do
			table.insert(num,num4[i])
		end
		for i = 1, #num5 do
			table.insert(num,num5[i])
		end
		for i = 1, #num6 do
			table.insert(num,num6[i])
		end
		for i = 1, #num7 do
			table.insert(num,num7[i])
		end
		for i = 1, #num8 do
			table.insert(num,num8[i])
		end
		for i = 1, #num do
			local inx = 0
			local  pos = Vector3(0,0,0) 
			if fenxicard[(GetPlateNum(cards[num[i]+1])+2)].num == 4 then
				if isOutCardOneOrTow then
					inx = (grid.transform.childCount) - (num[i]+1)
					local pos1 = grid:GetChild(inx-1).localPosition;
					pos = Vector3(-(pos1.x + 10), pos1.y ,0);
				else
					inx = num[i]+1
					local pos1 = grid:GetChild(inx).localPosition
					pos = Vector3((pos1.x-10), pos1.y ,0 )
				end
			elseif fenxicard[GetPlateNum(cards[num[i]+1])+2].num == 5 then
				if isOutCardOneOrTow then
					inx = (grid.transform.childCount) - (num[i]+2)
					local pos1 = grid:GetChild(inx-1).localPosition
					pos = Vector3(-(pos1.x + 30), pos1.y ,0)
				else
					inx = num[i]+1
					local pos1 = grid:GetChild(inx).localPosition
					pos = Vector3((pos1.x +10), pos1.y ,0)
				end
			elseif fenxicard[GetPlateNum(cards[num[i]+1])+2].num == 6 then
				if isOutCardOneOrTow then
					inx = (grid.transform.childCount) - (num[i]+3)
					local pos1 = grid:GetChild(inx-1).localPosition
					pos = Vector3(-(pos1.x+40), pos1.y ,0)
				else
					inx = num[i]+1
					local pos1 = grid:GetChild(inx).localPosition
					pos = Vector3((pos1.x+30), pos1.y ,0 )
				end
			elseif fenxicard[GetPlateNum(cards[num[i]+1])+2].num == 7 then
				if isOutCardOneOrTow then
					inx = (grid.transform.childCount) - (num[i]+4)
					local pos1 = grid:GetChild(inx-1).localPosition
					pos = Vector3(-(pos1.x + 60), pos1.y ,0)
				else
					inx = num[i]+1
					local pos1 = grid:GetChild(inx).localPosition
					pos = Vector3((pos1.x + 40), pos1.y ,0)
				end
			elseif fenxicard[GetPlateNum(cards[num[i]+1])+2].num == 8 then
				if isOutCardOneOrTow then
					inx = (grid.transform.childCount) - (num[i]+5)
					local pos1 = grid:GetChild(inx-1).localPosition
					pos = Vector3(-(pos1.x + 80), pos1.y ,0)
				else
					inx = num[i]+1
					local pos1 = grid:GetChild(inx).localPosition
					pos = Vector3((pos1.x+60), pos1.y ,0 )
				end
			end
			if fenxicard[GetPlateNum(cards[num[i]+1])+2].num==4 then
				beLeftCardBoom[index]:GetChild(i-1):GetComponent('UISprite').spriteName='提示_4炸'
			else
				beLeftCardBoom[index]:GetChild(i-1):GetComponent('UISprite').spriteName='提示_4炸以上'
			end
			beLeftCardBoom[index]:GetChild(i-1):Find('Label'):GetComponent('UILabel').text = fenxicard[GetPlateNum(cards[num[i]+1])+2].num..'张'
			beLeftCardBoom[index]:GetChild(i-1).localPosition = Vector3(pos.x, pos.y-20 ,0)
			beLeftCardBoom[index]:GetChild(i-1).gameObject:SetActive(true);
		end
	end
end

function this.SetRoomInfo()
    this.HideGridOut();
    this.RefreshPlayer()
    this.SetRoundNum(roomData.round)
    this.SetRoomID(roomData.roomNumber);
    this.RefreshMyGridIn()
end

function this.InitPlayerData(serverData)
    print('#serverData.players : '..#serverData.players)
    for i = 1, #serverData.players do
        local player = serverData.players[i];
        player.sex = player.sex == 0 and 1 or player.sex;
        if player.id == info_login.id then
            if mySeat == -1 then
                mySeat = player.seat
            else
                print('mySeat is not -1 mySeat:'..mySeat)
            end
        end

        playerData[player.seat] = player;
    end

    --有可能时群主来看，他虽然不是参与者，但是也可以看
    if mySeat == -1 then
        mySeat = 0;
    end
	if whoShow.isSelectSeat then
		mySeat = whoShow.mySeat
	end
end

function this.RefreshTime(labelTime)
    while true do
        if restTime > 0 then
            labelTime.text = os.date("%M:%S", restTime) --getDaoJiShi(timeChuo)--os.date("%M:%S")
            restTime = restTime - 1
        end
        coroutine.wait(1)
    end
end

--初始化游戏界面
function this.initPanel()
    scoreView.allScore.transform.gameObject:SetActive(false)
    scoreView.score.transform.gameObject:SetActive(false)
    scoreView.transform.gameObject:SetActive(false)
end

function this.GetPlayerDataByUIIndex(index)
    local i = index + mySeat
    if i > 0 then
        i = i % (#playerData+1)
    end
    return playerData[i]
end

function this.GetUIIndexBySeat(seat)
    return ((#playerData+1)-mySeat+seat)%(#playerData+1)
end
--刷新玩家信息
function this.RefreshPlayer()
    for i=0,3 do
        local p = this.GetPlayerDataByUIIndex(i)
        if i <= #playerData and p ~= nil then
            local p = this.GetPlayerDataByUIIndex(i)
            playerName[i]:GetComponent('UILabel').text = p.name
            coroutine.start(LoadPlayerIcon, playerIcon[i]:GetComponent('UITexture'), p.icon)
            SetUserData(playerIcon[i].gameObject, p);
            if i>0 then
                SetUserData(watchPlates[i].gameObject, p);
            end
            playerIcon[i].gameObject:SetActive(true)
            playerScore[i]:GetComponent('UILabel').text = p.score
            player[i].gameObject:SetActive(true)
        else
            playerName[i]:GetComponent('UILabel').text = ''
            playerIcon[i].gameObject:SetActive(true)
            playerIcon[i]:GetComponent('UITexture').mainTexture = nil
            playerScore[i]:GetComponent('UILabel').text = '0'
            playerGridIn[i].gameObject:SetActive(false)
            playerGridOut[i].gameObject:SetActive(false)
            OutCardZhaDan[i].gameObject:SetActive(false)
            SetUserData(playerIcon[i].gameObject, nil)
            if i>0 then
                SetUserData(watchPlates[i].gameObject, nil);
            end
        end
        playerSound[i].gameObject:SetActive(false)
    end
end
function this.GetDaiPai(cards,feiji)
	local daipai1 = {}
	local feiji1 = {}
	local daipai = {}
	for i = 1, #cards do
		table.insert(daipai1,cards[i])
	end
	for i = 1, #feiji do
		table.insert(feiji1,feiji[i])
	end
	for i = 1, #daipai1 do
		for j = 1, #feiji1 do
			if daipai1[i] == feiji1[j] then
				daipai1[i] = -1
				feiji1[j] = -2
			end
		end
	end
	for i = 1, #daipai1 do
		if daipai1[i] ~= -1 then
			table.insert(daipai,daipai1[i])
		end
	end
	print('feiji length : '..#feiji..'  daipai length : '..#daipai)
	return daipai
end

function this.OutCardSort(hand)
	local outCardSort = 
	{
		cards ={},
		feiji ={},
		daipai={}
	}
	local fenxicard = this.fenXiCard(hand.cards)
	local cardsNum = #hand.cards
	if hand.category == 2 then
		local daipai1 = {}
		local feiji1 = {}
		for i = 5, 15 do
			if fenxicard[i] then
				local aaaa = fenxicard[i]
				if aaaa.num >=3 then
					for j = 1, 3 do
						table.insert(feiji1, aaaa.trueValues[j])
					end
				end
			end
		end
		daipai1 = this.GetDaiPai(hand.cards,feiji1)
		outCardSort.cards = hand.cards;
		outCardSort.feiji = feiji1;
		outCardSort.daipai = daipai1;
		return outCardSort
	elseif hand.category == 5 then
		local daipai1 = {}
		local feiji1 = {}
		for i = (GetPlateNum(hand.minCard)+2), (GetPlateNum(hand.maxCard)+2) do
			if fenxicard[i] then
				for j = 1, 3 do
					table.insert(feiji1,fenxicard[i].trueValues[j])
				end
			end
		end
		daipai1 = this.GetDaiPai(hand.cards,feiji1)
		outCardSort.cards = hand.cards;
		outCardSort.feiji = feiji1;
		outCardSort.daipai = daipai1;
		return outCardSort
	else
		outCardSort.cards = hand.cards;
		outCardSort.feiji = {};
		outCardSort.daipai = {};
		return outCardSort
	end
end

function this.OnPlayerHand(record)--显示其他玩家出的牌
    for i=0,#playerGridOut do
        playerGridOut[i].gameObject:SetActive(false)
        OutCardZhaDan[i].gameObject:SetActive(false)
		playerGridOutDaiZi[i].gameObject:SetActive(false)
    end
    if not record then
        return
    end
    local index = this.GetUIIndexBySeat(record.seat)
	playerGridOut[index].gameObject:SetActive(true)
    local outcard = {}
	outcard.cards = record.cards
	outcard.category = record.cate
	outcard.maxCard = record.maxValue
	outcard.minCard = record.minValue
	local isOutCardOneOrTow = false
	if index ==1 or index ==2 then
		isOutCardOneOrTow = true
    end
    print('record.cate : '..record.cate)
    print('minCard : '..(GetPlateNum(record.minValue)+2))
    print('maxCard : '..(GetPlateNum(record.maxValue)+2))
    this.RefreshOutGrid(playerGridOut[index],this.OutCardSort(outcard),isOutCardOneOrTow,index)
   if record.cate == 6 then
        OutCardZhaDan[index].transform.gameObject:SetActive(true)
        OutCardZhaDanWenZi[index].transform:GetComponent("UILabel").text = string.format( "%d 张",#record.cards);
        if #record.cards == 4 then
            OutCardZhaDanWenZiBG[index].transform:GetComponent("UISprite").spriteName = '提示_4炸';
        else
            OutCardZhaDanWenZiBG[index].transform:GetComponent("UISprite").spriteName = '提示_4炸以上';
        end
    end
end

function this.RefreshMyGridIn()
    for i=0,roomData.setting.size -1 do
        local grid = playerGridIn[i]
        local pData = this.GetPlayerDataByUIIndex(i)
        if pData and pData.seat == mySeat then
            grid.gameObject:SetActive(true)
            this.RefreshGrid(grid, pData.cards)
            myCardList = pData.cards
        else
            grid.gameObject:SetActive(false)
        end
    end
end

function this.HideGridOut()
    for i = 0, roomData.setting.size - 1 do
        playerGridOut[i].gameObject:SetActive(false);
        OutCardZhaDan[i].gameObject:SetActive(false)
		playerGridOutDaiZi[i].gameObject:SetActive(false)
    end
end

function this.OnPlayerPlay(record)

    AudioManager.Instance:PlayAudio('betcard');
    if record.category == 6 then
        AudioManager.Instance:PlayAudio('ZD_LittleBoom')
    end
    this.OnPlayerHand(record);
    scoreView.score.scoreLabel:GetComponent('UILabel').text=record.smallRoundScore and record.smallRoundScore or 0
    --刷新左上角分数
    local pData = playerData[record.seat];
    local i = this.GetUIIndexBySeat(record.seat);
    if pData and mySeat == pData.seat then
        for ii=1,#record.cards do
            local cardID = record.cards[ii]
            local itemOut = nil
            for j=0,playerGridOut[i].transform.childCount-1 do
                local item = playerGridOut[i].transform:GetChild(j)
                if item.gameObject.activeSelf and GetUserData(item.gameObject) == cardID then
                    itemOut = item
                    break
                end
            end

            local itemIn = nil
            for k=0,playerGridIn[i].transform.childCount-1 do
                local item = playerGridIn[i].transform:GetChild(k)
                if item.gameObject.activeSelf and GetUserData(item.gameObject) == cardID then
                    itemIn = item
                    break
                end
            end

            if itemOut and itemIn then
                local tw_pos = itemOut:GetComponent('TweenPosition')
                local pos = itemOut.transform.position
                itemOut.transform.position =  itemIn.transform.position
                TweenPosition.Begin(itemOut.gameObject, 0.1, pos, true)

                local tw_sc = itemOut:GetComponent('TweenScale')
                local f = playerGridIn[i].transform.localScale.x / playerGridOut[i].transform.localScale.x
                itemOut.transform.localScale = Vector3.New(f, f, f)
                TweenScale.Begin(itemOut.gameObject, 0.1, Vector3.one)
            else
            end
        end

        if #pData.cards ~= #record.cards then
            --Debugger.Log('player {0} card count error', pData.name)
        end
        myCardList = pData.cards
    end
    if pData then
        for k=1,#record.cards do
            for j=1,#pData.cards do
                if record.cards[k] == pData.cards[j] then
                    pData.cards:remove(j)
                    break
                end
            end
        end
    end
    
    if pData and mySeat == pData.seat then
        this.RefreshGrid(playerGridIn[i], pData.cards) 
    end
    local nextSeat = record.nextSeat;
    for i = 0, 3 do
        playerzi[i].gameObject:SetActive(false);
    end
    helpNumWhenHaveOneCard = 0
    winSeat = nil
    if pData then
        this.PlayCardSound(record,record.cards,pData.sex,record.cate)
    end
    OutCardFinish[i].gameObject:SetActive(false);
    local name ;
    if record.roundOrder == 0 then
        name = '上游'
    elseif record.roundOrder == 1 then
        if RoundDetail.setting.size == 4 then
			name = '二游'
		else
			name = '下游'
		end
    elseif record.roundOrder == 2 then
        name = '三游'
    elseif record.roundOrder == 3 then
        name = '下游'
    elseif record.roundOrder == -1 then
        name = ''
    end
    if record.roundOrder ~= -1 then
		AudioManager.Instance:PlayAudio('winerVoice')
	end
    OutCardFinish[i]:GetComponent('UISprite').spriteName = name;
    OutCardFinish[i].gameObject:SetActive(record.roundOrder ~= -1);
end

function this.PlayCardSound(record,cards,sex,category)
    local soundName =''
    if category == 0 then
        soundName = string.format('single_%d_%d', sex, GetPlateNum(cards[1])+2)
    elseif category == 1 then
        soundName = string.format('double_%d_%d', sex, GetPlateNum(cards[1])+2)
    elseif category == 2 then
        local outcard = {}
        outcard.cards = record.cards
        outcard.category = record.cate
        outcard.maxCard = record.maxValue
        outcard.minCard = record.minValue
        local outCardSort = this.OutCardSort(outcard)
        soundName = string.format('triple_%d_%d', sex, GetPlateNum(outCardSort.feiji[1])+2)
    elseif category == 3 then
        soundName = string.format('danshun_%d', sex)
    elseif category == 4 then
        soundName = string.format('shuangshun_%d', sex)
    elseif category == 5 then
        soundName = string.format('plane_%d', sex)
    elseif category == 6 then
        soundName = string.format('zhadan_%d', sex)
    end
    if soundName ~= nil then
        AudioManager.Instance:PlayAudio(soundName)
    end
end

function this.SetRoundNum(num)
    roomRound:GetComponent('UILabel').text = "第"..num..'/'..roomData.setting.rounds..'局'--..setting_text
    --设置游戏规则面板
end

function this.SetRoomID(id)
    roomID:GetComponent("UILabel").text = id;
end


function this.NetLevel()
    if string.len(pingLabel.text) == 0 then
        return 3
    end
    local ping = tonumber(pingLabel.text)
    if ping < 100 then
        return 3
    elseif ping < 200 then
        return 2
    else
        return 1
    end
end

function this.OnPong()
    local connect = NetWorkManager.Instance:FindConnet('game')
    if connect then
        pingLabel.text = int64.tonum2(Util.GetTime()) - int64.tonum2(connect.LastHeartBeatTime)
    else
        pingLabel.text =  ''
    end
end


--给牌面赋值
function this.setPai(item,mycard,index)
    local t = item.transform:Find('type')
    local tSmall = item.transform:Find('typeSmall')
    local tBig = item.transform:Find('typeBig')
    local num = item.transform:Find('num')

    tSmall.gameObject:SetActive(false)
    tBig.gameObject:SetActive(false)
    num.gameObject:SetActive(false)
    t.gameObject:SetActive(false)
    local trueValue = index and mycard.trueValues[index] or mycard.trueValues[1]
    SetUserData(item.gameObject, trueValue)

    if trueValue < 52 then
        local strType
        local col = Color.white
        if mycard.type[index] == 0 then
            strType='DiamondIcon1'
            col = Color.white
        elseif mycard.type[index] == 1 then
            strType='ClubIcon1'
            col.r = 51/255
            col.g = 52/255
            col.b = 57/255
        elseif mycard.type[index] == 2 then
            strType='HeartIcon1'
            col = Color.white
        elseif mycard.type[index] == 3 then
            strType='SpadeIcon1'
            col.r = 51/255
            col.g = 52/255
            col.b = 57/255
        end
        t.gameObject:SetActive(true)
        t:GetComponent('UISprite').spriteName=strType
        --tSmall.gameObject:SetActive(true)
        tSmall:GetComponent('UISprite').spriteName=strType
        num.gameObject:SetActive(true)
        num:GetComponent('UISprite').spriteName = 'card_'..mycard.value
        num:GetComponent('UISprite').color=col
    else
        tBig.gameObject:SetActive(true)
        tBig:GetComponent('UISprite').spriteName='JokerIcon'
    end
end
--分析数据
function this.fenXiCard(cards)
    local myList = {}
    if cards then
        for i = 1, #cards do
            local value = GetPlateNum(cards[i])+2--逻辑值（牌面值）
            if not myList[value] then
                myList[value]={}
                myList[value].trueValues = {}--真实的值（服务器定义的值）
                myList[value].num = 0--牌的个数
                myList[value].type = {}--牌的花色
            end
            table.insert(myList[value].trueValues,cards[i])
            myList[value].value = value
            myList[value].num = myList[value].num + 1
            table.insert(myList[value].type, GetPlateType(cards[i]))
        end
    end
    return myList
end

--初始化手牌
function this.initCardGroup(grid)
    for i=0,grid.childCount-1 do
        local group = grid:GetChild(i)
        group:Find('type').gameObject:SetActive(false)
        local cardGrid = group:Find('cardGrid')
        for j=0,cardGrid.childCount-1 do
            cardGrid:GetChild(j).gameObject:SetActive(false)
        end
        group.gameObject:SetActive(false)
    end
end
--初始化出牌仓
function this.initOutCardGroup(grid)
    for i=0,grid.childCount-1 do
        grid:GetChild(i).gameObject:SetActive(false)
        grid:GetChild(i):GetComponent('UIWidget').alpha =1
    end
end
--给手牌賦值
function this.cardGroupFuZhi(myList,grid)
    for i=5,15 do
        if myList[i] then
            local v = myList[i]
            local group = grid:GetChild(15-v.value)
            local cardGrid = group:Find('cardGrid')
            local type = group:Find('type')
            if v.num>=4 then
                if v.num==4 then
                    type:GetComponent('UISprite').spriteName='提示_4炸'
                else
                    type:GetComponent('UISprite').spriteName='提示_4炸以上'
                end
                type:Find('Label'):GetComponent('UILabel').text = v.num..'炸'
                type.gameObject:SetActive(true)
            end
            for j=0,v.num-1 do
                local item = cardGrid:GetChild(j)
                item.gameObject:SetActive(true)
                this.setPai(item,v,j+1)
            end
            group.gameObject:SetActive(true)

            if v.num>3 then
                cardGrid:GetComponent('UIGrid').cellHeight = -15
            else
                cardGrid:GetComponent('UIGrid').cellHeight = -60
            end
            cardGrid:GetComponent('UIGrid'):Reposition()
        end
    end
    grid:GetComponent('UIGrid'):Reposition()
end
--给出牌赋值
function this.outCardGroupFuZhi(outcard,grid,isOutCardOneOrTow,index,isSelectOutCardType)
	if outcard.cards ~= nil and #outcard.cards>0 then
		table.sort(outcard.cards)
		if outcard.feiji ~= nil and #outcard.feiji>0 then
			table.sort(outcard.feiji)
			--print('grid.childCount : '..grid.transform.childCount..'  feiji : '..#outcard.feiji..'  outcard : '..#outcard.cards)
			local feijiNum = #outcard.feiji
			local gridChildNum = grid.transform.childCount
			for i = 1,feijiNum  do
				if gridChildNum>i then
					local j 
					if isOutCardOneOrTow then
						j = gridChildNum-i
					else
						j = i-1
					end
					local item = grid:GetChild(j)
					item.gameObject:SetActive(true)
					local card=
					{
						trueValues={outcard.feiji[i]},
						type={GetPlateType(outcard.feiji[i])},
						value=GetPlateNum(outcard.feiji[i])+2
					}
					this.setPai(item,card,1)
				end
			end
			if outcard.daipai ~= nill and #outcard.daipai>0 then
				table.sort(outcard.daipai)
				for i = 1,#outcard.daipai  do
					local j 
					if isOutCardOneOrTow then
						j = gridChildNum-feijiNum-i-3
					else
						j = i+feijiNum+2
					end
					if gridChildNum>j then
						local item = grid:GetChild(j)
						item.gameObject:SetActive(true)
						local card=
						{
							trueValues={outcard.daipai[i]},
							type={GetPlateType(outcard.daipai[i])},
							value=GetPlateNum(outcard.daipai[i])+2
						}
						this.setPai(item,card,1)
					end
				end
				if isOutCardOneOrTow then
					StartCoroutine(function()
						grid:GetChild(gridChildNum-feijiNum-1):GetComponent('UIWidget').alpha =0
						grid:GetChild(gridChildNum-feijiNum-2):GetComponent('UIWidget').alpha =0
						grid:GetChild(gridChildNum-feijiNum-3):GetComponent('UIWidget').alpha =0
						grid:GetChild(gridChildNum-feijiNum-1).gameObject:SetActive(true)
						grid:GetChild(gridChildNum-feijiNum-2).gameObject:SetActive(true)
						grid:GetChild(gridChildNum-feijiNum-3).gameObject:SetActive(true)
						grid:GetComponent('UIGrid'):Reposition()
						WaitForEndOfFrame()	
						playerGridOutDaiZi[index].transform.position =  grid:GetChild(gridChildNum-feijiNum-2).transform.position
						playerGridOutDaiZi[index].gameObject:SetActive(true)
					end)
				else
					StartCoroutine(function()
						grid:GetChild(#outcard.feiji):GetComponent('UIWidget').alpha =0
						grid:GetChild(#outcard.feiji+1):GetComponent('UIWidget').alpha =0
						grid:GetChild(#outcard.feiji+2):GetComponent('UIWidget').alpha =0
						grid:GetChild(#outcard.feiji).gameObject:SetActive(true)
						grid:GetChild(#outcard.feiji+1).gameObject:SetActive(true)
						grid:GetChild(#outcard.feiji+2).gameObject:SetActive(true)
						grid:GetComponent('UIGrid'):Reposition()
						WaitForEndOfFrame()
						local vector = grid:GetChild(#outcard.feiji+1).transform.position
						if isSelectOutCardType then
						else
							playerGridOutDaiZi[index].transform.position =  Vector3(vector.x,vector.y,vector.z+0.01)
							playerGridOutDaiZi[index].gameObject:SetActive(true)
						end
						
					end)
				end
			else
				grid:GetComponent('UIGrid'):Reposition()
			end
		else
			for i = 1,#outcard.cards  do
				if grid.transform.childCount>=i then
					local item
					if isOutCardOneOrTow then
						item = grid:GetChild(grid.transform.childCount-i)
					else
						item = grid:GetChild(i-1)
					end
					item.gameObject:SetActive(true)
					local card=
					{
						trueValues={outcard.cards[i]},
						type={GetPlateType(outcard.cards[i])},
						value=GetPlateNum(outcard.cards[i])+2
					}
					this.setPai(item,card,1)
				end
			end
			grid:GetComponent('UIGrid'):Reposition()
		end
	end
end
--刷新出的牌
function this.RefreshOutGrid(grid, outcard,isOutCardOneOrTow,index)
    this.initOutCardGroup(grid)--初始化出牌仓
    this.outCardGroupFuZhi(outcard,grid,isOutCardOneOrTow,index)--给出牌复制
end
--刷新自己手牌
function this.RefreshGrid(grid, cards)
    local myList = this.fenXiCard(cards)--分析数据  存到该表

    this.initCardGroup(grid)--初始化手牌

    this.cardGroupFuZhi(myList,grid)--给手牌复制
end


function this.OnClickButtonSlow(go)
    AudioManager.Instance:PlayAudio('btn')
    -- if rawSpeed > playInterval then
    -- 	playInterval = rawSpeed
    -- 	FastLabel:GetComponent('UILabel').text = ''
    -- else
    if playInterval + cutTime  <= 2 then
        playInterval = playInterval + cutTime
    end
    --end
    local num = (rawSpeed - playInterval)/cutTime
    if num > 0 then
        FastLabel:GetComponent('UILabel').text = 'x'..num
        SlowLabel:GetComponent('UILabel').text = ''
    elseif num <0 then
        FastLabel:GetComponent('UILabel').text = ''
        SlowLabel:GetComponent('UILabel').text = 'x'..math.abs(num)
    else
        FastLabel:GetComponent('UILabel').text = ''
        SlowLabel:GetComponent('UILabel').text = ''
    end
end

function this.OnClickButtonPause(go)
    AudioManager.Instance:PlayAudio('btn')
    isPause = not isPause
    if isPause then
        ButtonPause:GetComponent('UIButton').normalSprite = 'bofang'
    else
        ButtonPause:GetComponent('UIButton').normalSprite = 'zanting'
    end
end

function this.OnClickButtonFast(go)
    AudioManager.Instance:PlayAudio('btn')
    -- if playInterval > rawSpeed then
    -- 	playInterval = rawSpeed
    -- 	SlowLabel:GetComponent('UILabel').text = ''
    -- else
    if playInterval - cutTime >= 0.5 then
        playInterval = playInterval - cutTime
    end
    --end

    local num = (rawSpeed - playInterval)/cutTime
    if num > 0 then
        FastLabel:GetComponent('UILabel').text = 'x'..num
        SlowLabel:GetComponent('UILabel').text = ''
    elseif num <0 then
        FastLabel:GetComponent('UILabel').text = ''
        SlowLabel:GetComponent('UILabel').text = 'x'..math.abs(num)
    else
        FastLabel:GetComponent('UILabel').text = ''
        SlowLabel:GetComponent('UILabel').text = ''
    end
end

function this.OnClickButtonBack(go)
    AudioManager.Instance:PlayAudio('btn')
    coroutine.stop(conFun)
    coroutine.stop(conTime)

    PanelManager.Instance:ShowWindow(whoShow.name)
    PanelManager.Instance:HideWindow(gameObject.name)
    AudioManager.Instance:PlayMusic('MainBG', true);

end

function this.OnPlayerPass(record)
    local index = this.GetUIIndexBySeat(record.seat)
    OutCardZhaDan[index].gameObject:SetActive(false)
    this.initOutCardGroup(playerGridOut[index])
    playerGridOutDaiZi[index].gameObject:SetActive(false)
    playerzi[index].gameObject:GetComponent('UISprite').spriteName = 'pass_1';
    playerzi[index].gameObject:GetComponent('UISprite'):MakePixelPerfect()
    playerzi[index].gameObject:SetActive(true);
    AudioManager.Instance:PlayAudio(string.format('pass_%d_1', playerData[record.seat].sex))
    winSeat = record.winSeat
end

--点击看牌按钮
function this.OnWatchPlateClick(go)
    --先暂停
    isPause = true
    ButtonPause:GetComponent('UIButton').normalSprite = 'bofang'
    --显示牌面窗口
    watchPanel.gameObject:SetActive(true);
    local seat = GetUserData(go).seat;
    this.SetWatchPlatesGrid(playerData[seat].cards);
end

--点击空白处关闭看牌
function this.OnWatchMaskClick(go)
    --先播放
    isPause = false
    ButtonPause:GetComponent('UIButton').normalSprite = 'zanting'
    --关闭牌面显示窗口
    watchPanel.gameObject:SetActive(false);
end

--设置查看的牌面
function this.SetWatchPlatesGrid(cards)
    if not cards then
        return ;
    end

    for i = 0, watchGrid.childCount-1 do
        watchGrid:GetChild(i).gameObject:SetActive(false);
    end

    table.sort(cards,tableSortDesc);

    for i = 1, #cards do
        local cardItemObj = nil;
        if i <= watchGrid.childCount then
            cardItemObj = watchGrid:GetChild(i-1).gameObject;
        else
            cardItemObj = NGUITools.AddChild(watchGrid.gameObject,watchPlatePrefab.gameObject);
        end

        --设置牌面深度，
        if i > 1 then
            this.SetPlateDepth(watchGrid:GetChild(i-2).gameObject,watchGrid:GetChild(i-1).gameObject);
        end


        local card={trueValues={cards[i]},type={GetPlateType(cards[i])},value=GetPlateNum(cards[i])+2}
        this.setPai(cardItemObj,card,1);
        cardItemObj:SetActive(true);
    end

    watchGrid:GetComponent("UIGrid"):Reposition();

end

function this.SetPlateDepth(itemBefore,itemAfter)
    local tSmallBeforeDepth = itemBefore.transform:Find('typeSmall'):GetComponent("UISprite").depth;

    itemAfter.transform:Find('type'):GetComponent("UISprite").depth       = tSmallBeforeDepth+2;
    itemAfter.transform:Find('bg'):GetComponent("UISprite").depth         = tSmallBeforeDepth+1;
    itemAfter.transform:Find('typeSmall'):GetComponent("UISprite").depth  = tSmallBeforeDepth+2;
    itemAfter.transform:Find('num'):GetComponent("UISprite").depth        = tSmallBeforeDepth+2;
end

function this.OnClickPlayerIcon(go)
    print(' RoundDetail.openUserCard : '..tostring(RoundDetail.openUserCard)..' RoundDetail.isLord : '..tostring(RoundDetail.isLord))
	if RoundDetail.openUserCard then
		local pData = GetUserData(go)
		if not pData then
			return
		end
		local userData = {}
		userData.rseat 		= pData.seat
		userData.mySeat		= mySeat
		userData.nickname   = pData.name
		userData.icon       = pData.icon
		userData.sex        = pData.sex
		userData.ip         = pData.ip
		userData.userId     = pData.id
		userData.gameType	= proxy_pb.XHZD
		userData.signature  = ''
		userData.imgUrl  = ''
		userData.sendMsgAllowed = roomData.setting.sendMsgAllowed
		userData.isRePlay = true
		if roomData.clubId ~= '0' then
			userData.gameMode = roomData.setting.gameMode
		end
		userData.fee = pData.fee
		userData.isShowSomeID = not RoundDetail.isLord
		PanelManager.Instance:ShowWindow('panelPlayerInfo', userData)
	end
end